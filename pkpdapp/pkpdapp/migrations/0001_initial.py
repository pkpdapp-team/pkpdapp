# Generated by Django 3.0.7 on 2021-01-12 17:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of the dataset', max_length=100)),
                ('datetime', models.DateTimeField(help_text=('Date/time the experiment was conducted. ', 'All time measurements are relative to this date/time'))),
                ('description', models.TextField(help_text='short description of the dataset')),
                ('administration_type', models.CharField(choices=[('T1', 'type1'), ('T2', 'type2')], help_text='method of drug administration', max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='PkpdModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of the model', max_length=100)),
                ('description', models.TextField(help_text='short description of the model')),
                ('model_type', models.CharField(choices=[('PK', 'Pharmokinetic'), ('PD', 'Pharmodynamic')], help_text='type of model, e.g. PK or PD', max_length=2)),
                ('sbml', models.TextField(help_text='the model represented using SBML (see http://sbml.org)')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of the project', max_length=100)),
                ('description', models.TextField(help_text='short description of the project')),
                ('datasets', models.ManyToManyField(help_text='datasets referenced by this project', to='pkpdapp.Dataset')),
                ('pkpd_models', models.ManyToManyField(help_text='models referenced by this project', to='pkpdapp.PkpdModel')),
                ('users', models.ManyToManyField(help_text='users with access to this project', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_project', models.ForeignKey(help_text='currently selected project for user', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pkpdapp.Project')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BiomarkerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of the biomarker type', max_length=100)),
                ('unit', models.CharField(choices=[('mg', 'mg'), ('g', 'g'), ('cm3', 'cm^3')], help_text='units for the value stored in :model:`pkpdapp.Biomarker`', max_length=3)),
                ('description', models.TextField(help_text='short description of the biomarker type')),
                ('dataset', models.ForeignKey(help_text='dataset containing this biomarker measurement', on_delete=django.db.models.deletion.CASCADE, to='pkpdapp.Dataset')),
            ],
        ),
        migrations.CreateModel(
            name='Biomarker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.FloatField(help_text='time point of measurement, in days')),
                ('subject_id', models.IntegerField(help_text='subject id for biomarker measurement')),
                ('value', models.FloatField(help_text='value of the measurement')),
                ('biomarker_type', models.ForeignKey(help_text='biomarker type, for example "concentration in mg"', on_delete=django.db.models.deletion.CASCADE, to='pkpdapp.BiomarkerType')),
            ],
        ),
    ]
