#
# This file is part of PKPDApp (https://github.com/pkpdapp-team/pkpdapp) which
# is released under the BSD 3-clause license. See accompanying LICENSE.md for
# copyright notice and full license details.
#
# Generated by Django 3.0.7 on 2021-01-12 17:55
# flake8: noqa



from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields
import pkpdapp.models.compound
import pkpdapp.models.dose
import pkpdapp.models.inference
import pkpdapp.models.myokit_model_mixin
import pkpdapp.models.protocol


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Algorithm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of the algorithm', max_length=100)),
                ('category', models.CharField(choices=[('SA', 'Sampling'), ('OP', 'Optimisation'), ('OT', 'Optimisation')], max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Biomarker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.FloatField(help_text='time point of measurement, in hours.')),
                ('value', models.FloatField(help_text='value of the measurement')),
            ],
        ),
        migrations.CreateModel(
            name='BiomarkerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of the biomarker type', max_length=100)),
                ('description', models.TextField(blank=True, help_text='short description of the biomarker type', null=True)),
                ('display', models.BooleanField(default=True, help_text='True if this biomarker type will be displayed in the frontend, False otherwise')),
                ('color', models.IntegerField(default=0, help_text='Color index associated with this biomarker type. For plotting purposes in the frontend')),
                ('axis', models.BooleanField(default=False, help_text='True/False if biomarker type displayed on LHS/RHS axis')),
            ],
        ),
        migrations.CreateModel(
            name='CategoricalBiomarker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.FloatField(help_text='time point of measurement, in hours.')),
                ('value', models.CharField(help_text='category name', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CombinedModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_only', models.BooleanField(default=False, help_text='true if object has been stored')),
                ('datetime', models.DateTimeField(blank=True, help_text='datetime the object was stored.', null=True)),
                ('name', models.CharField(help_text='name of the model', max_length=100)),
                ('species', models.CharField(choices=[('H', 'human'), ('R', 'rat'), ('N', 'non-human primate'), ('M', 'mouse')], default='H', help_text='species', max_length=1)),
                ('has_saturation', models.BooleanField(default=False, help_text='whether the pk model has saturation')),
                ('has_effect', models.BooleanField(default=False, help_text='whether the pk model has effect compartment')),
                ('has_lag', models.BooleanField(default=False, help_text='whether the pk model has lag')),
                ('has_bioavailability', models.BooleanField(default=False, help_text='whether the pk model has bioavailability')),
                ('has_hill_coefficient', models.BooleanField(default=False, help_text='whether the pd model has hill coefficient')),
                ('time_max', models.FloatField(default=30, help_text='suggested time to simulate after the last dose (in the time units specified by the mmt model)')),
            ],
            options={
                'abstract': False,
            },
            bases=(pkpdapp.models.myokit_model_mixin.MyokitModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Compound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of the compound', max_length=100)),
                ('description', models.TextField(blank=True, default='', help_text='short description of the compound')),
                ('molecular_mass', models.FloatField(default=500.0, help_text='molecular mass for compound for conversion from mol to grams')),
                ('compound_type', models.CharField(choices=[('SM', 'Small Molecule'), ('LM', 'Large Molecule')], default='SM', max_length=2)),
                ('fraction_unbound_plasma', models.FloatField(blank=True, default=0.02, help_text='fraction unbound plasma (unitless)', null=True)),
                ('blood_to_plasma_ratio', models.FloatField(blank=True, default=1.0, help_text='blood to plasma ratio (unitless)', null=True)),
                ('intrinsic_clearance', models.FloatField(blank=True, help_text='intrinsic clearance', null=True)),
                ('intrinsic_clearance_assay', models.CharField(choices=[('MS', 'Microsomes'), ('HC', 'Hepatocytes')], default='MS', max_length=2)),
                ('fraction_unbound_including_cells', models.FloatField(blank=True, default=1.0, help_text='fraction unbound in plasma and red blood cells (unitless)', null=True)),
                ('target_molecular_mass', models.FloatField(default=25000.0, help_text='molecular mass for target for conversion from mol to grams')),
                ('target_concentration', models.FloatField(blank=True, default=1.0, help_text='target concentration', null=True)),
                ('dissociation_constant', models.FloatField(blank=True, help_text='dissociation constant', null=True)),
                ('is_soluble', models.BooleanField(default=True, help_text='is the compound target soluble')),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of the dataset', max_length=100)),
                ('datetime', models.DateTimeField(blank=True, help_text='date/time the experiment was conducted. All time measurements are relative to this date/time, which is in YYYY-MM-DD HH:MM:SS format. For example, 2020-07-18 14:30:59', null=True)),
                ('description', models.TextField(blank=True, default='', help_text='short description of the dataset')),
            ],
        ),
        migrations.CreateModel(
            name='DerivedVariable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_only', models.BooleanField(default=False, help_text='true if object has been stored')),
                ('datetime', models.DateTimeField(blank=True, help_text='datetime the object was stored.', null=True)),
                ('type', models.CharField(choices=[('RO', 'receptor occupancy'), ('FUP', 'faction unbound plasma'), ('BPR', 'blood plasma ratio')], help_text='type of derived variable', max_length=3)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DoseBase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.FloatField(help_text='starting time point of dose, see protocol for units')),
                ('amount', models.FloatField(help_text='amount of compound administered over the duration, see protocol for units. Rate of administration is assumed constant')),
                ('duration', models.FloatField(default=1.0, help_text='Duration of dose administration, see protocol for units. Duration must be greater than 0.', validators=[pkpdapp.models.dose.validate_duration])),
                ('repeats', models.IntegerField(default=1, help_text='Number of times to repeat the dose. ')),
                ('repeat_interval', models.FloatField(default=1.0, help_text='Interval between repeated doses. See protocol for units. ')),
            ],
        ),
        migrations.CreateModel(
            name='Inference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_only', models.BooleanField(default=False, help_text='true if object has been stored')),
                ('datetime', models.DateTimeField(blank=True, help_text='datetime the object was stored.', null=True)),
                ('name', models.CharField(help_text='name of the dataset', max_length=100)),
                ('description', models.TextField(blank=True, default='', help_text='short description of what this inference does')),
                ('initialization_strategy', models.CharField(choices=[('D', 'Default Value of model'), ('R', 'Random from prior'), ('F', 'From other inference')], default='R', max_length=1)),
                ('number_of_chains', models.IntegerField(default=4, help_text='number of chains')),
                ('max_number_of_iterations', models.IntegerField(default=1000, help_text='maximum number of iterations')),
                ('burn_in', models.IntegerField(default=0, help_text='final iteration of burn-in')),
                ('number_of_iterations', models.IntegerField(default=0, help_text='number of iterations calculated')),
                ('time_elapsed', models.IntegerField(default=0, help_text='Elapsed run time for inference in seconds')),
                ('number_of_function_evals', models.IntegerField(default=0, help_text='number of function evaluations')),
                ('task_id', models.CharField(blank=True, help_text='If executing, this is the celery task id', max_length=40, null=True)),
                ('metadata', models.JSONField(default=dict, help_text='metadata for inference')),
                ('algorithm', models.ForeignKey(default=pkpdapp.models.inference.get_default_optimisation_algorithm, help_text='algorithm used to perform the inference', on_delete=django.db.models.deletion.PROTECT, to='pkpdapp.algorithm')),
                ('initialization_inference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='pkpdapp.inference')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InferenceChain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inference', models.ForeignKey(help_text='inference for this chain', on_delete=django.db.models.deletion.CASCADE, related_name='chains', to='pkpdapp.inference')),
            ],
        ),
        migrations.CreateModel(
            name='LogLikelihood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of log_likelihood.', max_length=100)),
                ('description', models.TextField(blank=True, help_text='description of log_likelihood. For equations will be the code of that equation using Python syntax: arg1 * arg2^arg3', null=True)),
                ('value', models.FloatField(blank=True, help_text='set if a fixed value is required', null=True)),
                ('time_independent_data', models.BooleanField(default=True, help_text='True if biomarker_type refers to time-independent data. If there are multiple timepoints in biomarker_type then only the first is taken ')),
                ('observed', models.BooleanField(default=False, help_text='True if this log_likelihood is observed ')),
                ('form', models.CharField(choices=[('N', 'Normal'), ('U', 'Uniform'), ('LN', 'Log-Normal'), ('F', 'Fixed'), ('S', 'Sum'), ('E', 'Equation'), ('M', 'Model')], default='F', max_length=2)),
                ('biomarker_type', models.ForeignKey(blank=True, help_text='data associated with this log_likelihood. This is used for measurement data (observed=True) or for covariates (observed=False). The random variable associated with this log_likelihood has the same shape as this data. For covariates the subject ids in the data correspond to the values of the random variable at that location.', null=True, on_delete=django.db.models.deletion.PROTECT, to='pkpdapp.biomarkertype')),
            ],
        ),
        migrations.CreateModel(
            name='PharmacodynamicModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_only', models.BooleanField(default=False, help_text='true if object has been stored')),
                ('datetime', models.DateTimeField(blank=True, help_text='datetime the object was stored.', null=True)),
                ('name', models.CharField(help_text='name of the model', max_length=100)),
                ('description', models.TextField(blank=True, default='', help_text='short description of the model')),
                ('mmt', models.TextField(default='[[model]]\n\n[myokit]\ntime = 0 bind time', help_text='the model represented using mmt (see https://myokit.readthedocs)')),
                ('time_max', models.FloatField(default=30, help_text='suggested maximum time to simulate for this model (in the time units specified by the mmt model)')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, pkpdapp.models.myokit_model_mixin.MyokitModelMixin),
        ),
        migrations.CreateModel(
            name='PharmacokineticModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_only', models.BooleanField(default=False, help_text='true if object has been stored')),
                ('datetime', models.DateTimeField(blank=True, help_text='datetime the object was stored.', null=True)),
                ('name', models.CharField(help_text='name of the model', max_length=100)),
                ('description', models.TextField(blank=True, default='', help_text='short description of the model')),
                ('mmt', models.TextField(default='[[model]]\n\n[myokit]\ntime = 0 bind time', help_text='the model represented using mmt (see https://myokit.readthedocs)')),
                ('time_max', models.FloatField(default=30, help_text='suggested maximum time to simulate for this model (in the time units specified by the mmt model)')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, pkpdapp.models.myokit_model_mixin.MyokitModelMixin),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of the project', max_length=100)),
                ('description', models.TextField(blank=True, default='', help_text='short description of the project')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('species', models.CharField(choices=[('M', 'Mouse'), ('R', 'Rat'), ('H', 'Human'), ('K', 'Monkey'), ('O', 'Other')], default='O', help_text='subject species', max_length=1)),
                ('compound', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pkpdapp.compound')),
            ],
        ),
        migrations.CreateModel(
            name='Protocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_only', models.BooleanField(default=False, help_text='true if object has been stored')),
                ('datetime', models.DateTimeField(blank=True, help_text='datetime the object was stored.', null=True)),
                ('name', models.CharField(help_text='name of the protocol', max_length=100)),
                ('dose_type', models.CharField(choices=[('D', 'IV'), ('I', 'Extravascular')], default='D', max_length=1)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Simulation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of the simulation', max_length=100)),
                ('nrows', models.IntegerField(default=1, help_text='number of subplot rows')),
                ('ncols', models.IntegerField(default=1, help_text='number of subplot columns')),
                ('time_max', models.FloatField(default=30, help_text='maximum time for the simulation', validators=[django.core.validators.MinValueValidator(0)])),
                ('abs_tolerance', models.FloatField(default=1e-06, help_text='absolute tolerance for the simulation', validators=[django.core.validators.MinValueValidator(0)])),
                ('rel_tolerance', models.FloatField(default=1e-06, help_text='relative tolerance for the simulation', validators=[django.core.validators.MinValueValidator(0)])),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='simulations', to='pkpdapp.project')),
            ],
        ),
        migrations.CreateModel(
            name='SimulationPlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField(help_text='index of the plot in the simulation')),
                ('x_scale', models.CharField(choices=[('lin', 'Linear'), ('lg2', 'Log2'), ('lg10', 'Log10'), ('ln', 'Ln')], default='lin', help_text='scale for x axis', max_length=4)),
                ('y_scale', models.CharField(choices=[('lin', 'Linear'), ('lg2', 'Log2'), ('lg10', 'Log10'), ('ln', 'Ln')], default='lin', help_text='scale for y axis', max_length=4)),
                ('y2_scale', models.CharField(choices=[('lin', 'Linear'), ('lg2', 'Log2'), ('lg10', 'Log10'), ('ln', 'Ln')], default='lin', help_text='scale for rhs y axis', max_length=4)),
                ('simulation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plots', to='pkpdapp.simulation')),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(help_text='symbol for unit display', max_length=50)),
                ('g', models.FloatField(default=0, help_text='grams exponent')),
                ('m', models.FloatField(default=0, help_text='meters exponent')),
                ('s', models.FloatField(default=0, help_text='seconds exponent')),
                ('A', models.FloatField(default=0, help_text='ampere exponent')),
                ('K', models.FloatField(default=0, help_text='kelvin exponent')),
                ('cd', models.FloatField(default=0, help_text='candela exponent')),
                ('mol', models.FloatField(default=0, help_text='mole exponent')),
                ('multiplier', models.FloatField(default=0, help_text='multiplier in powers of 10')),
            ],
        ),
        migrations.CreateModel(
            name='Dose',
            fields=[
                ('dosebase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pkpdapp.dosebase')),
                ('read_only', models.BooleanField(default=False, help_text='true if object has been stored')),
                ('datetime', models.DateTimeField(blank=True, help_text='datetime the object was stored.', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('pkpdapp.dosebase', models.Model),
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_only', models.BooleanField(default=False, help_text='true if object has been stored')),
                ('datetime', models.DateTimeField(blank=True, help_text='datetime the object was stored.', null=True)),
                ('is_public', models.BooleanField(default=False)),
                ('lower_bound', models.FloatField(default=1e-06, help_text='lowest possible value for this variable')),
                ('upper_bound', models.FloatField(default=2, help_text='largest possible value for this variable')),
                ('default_value', models.FloatField(default=1, help_text='default value for this variable')),
                ('is_log', models.BooleanField(default=False, help_text='True if default_value is stored as the log of this value')),
                ('name', models.CharField(help_text='name of the variable', max_length=100)),
                ('description', models.TextField(blank=True, help_text='description of the variable', null=True)),
                ('binding', models.CharField(blank=True, help_text='myokit binding of the variable (e.g. time)', max_length=100, null=True)),
                ('qname', models.CharField(help_text='fully qualitifed name of the variable', max_length=200)),
                ('unit_symbol', models.CharField(blank=True, help_text='if unit is None then this is the unit of this variable as a string', max_length=20, null=True)),
                ('constant', models.BooleanField(default=True, help_text='True for a constant variable of the model, i.e. a parameter. False if non-constant, i.e. an output of the model (default is True)')),
                ('state', models.BooleanField(default=False, help_text='True if it is a state variable of the model and has an initial condition parameter (default is False)')),
                ('color', models.IntegerField(default=0, help_text='Color index associated with this variable. For display purposes in the frontend')),
                ('display', models.BooleanField(default=True, help_text='True if this variable will be displayed in the frontend, False otherwise')),
                ('axis', models.BooleanField(default=False, help_text='False/True if biomarker type displayed on LHS/RHS axis')),
                ('dosed_pk_model', models.ForeignKey(blank=True, help_text='dosed pharmacokinetic model', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='variables', to='pkpdapp.combinedmodel')),
                ('pd_model', models.ForeignKey(blank=True, help_text='pharmacodynamic model', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='variables', to='pkpdapp.pharmacodynamicmodel')),
                ('pk_model', models.ForeignKey(blank=True, help_text='pharmacokinetic model', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='variables', to='pkpdapp.pharmacokineticmodel')),
                ('protocol', models.ForeignKey(blank=True, help_text='dosing protocol', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='variables', to='pkpdapp.protocol')),
                ('unit', models.ForeignKey(blank=True, help_text='variable values are in this unit (note this might be different from the unit in the stored sbml)', null=True, on_delete=django.db.models.deletion.PROTECT, to='pkpdapp.unit')),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_in_dataset', models.IntegerField(help_text='unique id in the dataset')),
                ('shape', models.IntegerField(default=0, help_text='Shape index associated with this subject. For plotting purposes in the frontend')),
                ('display', models.BooleanField(default=True, help_text='True if this subject will be displayed in the frontend, False otherwise')),
                ('metadata', jsonfield.fields.JSONField(default=dict, help_text='subject metadata')),
                ('dataset', models.ForeignKey(help_text='dataset containing this subject', on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='pkpdapp.dataset')),
                ('protocol', models.ForeignKey(blank=True, help_text='dosing protocol for this subject.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subjects', to='pkpdapp.protocol')),
            ],
        ),
        migrations.CreateModel(
            name='SimulationYAxis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('right', models.BooleanField(default=False, help_text='True if the variable is plotted on the right y axis')),
                ('plot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='y_axes', to='pkpdapp.simulationplot')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='y_axes', to='pkpdapp.variable')),
            ],
        ),
        migrations.CreateModel(
            name='SimulationSlider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('simulation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sliders', to='pkpdapp.simulation')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sliders', to='pkpdapp.variable')),
            ],
        ),
        migrations.AddField(
            model_name='simulationplot',
            name='x_unit',
            field=models.ForeignKey(help_text='unit for x axis', on_delete=django.db.models.deletion.PROTECT, related_name='simulation_plots', to='pkpdapp.unit'),
        ),
        migrations.AddField(
            model_name='simulationplot',
            name='y_unit',
            field=models.ForeignKey(blank=True, help_text='unit for y axis', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='simulation_plots_y', to='pkpdapp.unit'),
        ),
        migrations.AddField(
            model_name='simulationplot',
            name='y_unit2',
            field=models.ForeignKey(blank=True, help_text='unit for rhs y axis', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='simulation_plots_y2', to='pkpdapp.unit'),
        ),
        migrations.CreateModel(
            name='SimulationCxLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(help_text='value of the line')),
                ('plot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cx_lines', to='pkpdapp.simulationplot')),
            ],
        ),
        migrations.AddField(
            model_name='simulation',
            name='time_max_unit',
            field=models.ForeignKey(help_text='unit for maximum time', on_delete=django.db.models.deletion.PROTECT, related_name='simulation_time_max', to='pkpdapp.unit'),
        ),
        migrations.AddField(
            model_name='protocol',
            name='amount_unit',
            field=models.ForeignKey(blank=True, default=pkpdapp.models.protocol.get_mg_unit, help_text='unit for the amount value stored in each dose', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='protocols_amount', to='pkpdapp.unit'),
        ),
        migrations.AddField(
            model_name='protocol',
            name='compound',
            field=models.ForeignKey(blank=True, help_text='drug compound', null=True, on_delete=django.db.models.deletion.PROTECT, to='pkpdapp.compound'),
        ),
        migrations.AddField(
            model_name='protocol',
            name='project',
            field=models.ForeignKey(blank=True, help_text='Project that "owns" this protocol.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='protocols', to='pkpdapp.project'),
        ),
        migrations.AddField(
            model_name='protocol',
            name='time_unit',
            field=models.ForeignKey(blank=True, default=pkpdapp.models.protocol.get_h_unit, help_text='unit for the start_time and duration values stored in each dose', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='protocols_time', to='pkpdapp.unit'),
        ),
        migrations.CreateModel(
            name='ProjectAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_only', models.BooleanField(default=False, help_text='True if user has read access only')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pkpdapp.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='users',
            field=models.ManyToManyField(help_text='users with access to this project', through='pkpdapp.ProjectAccess', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PkpdMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_only', models.BooleanField(default=False, help_text='true if object has been stored')),
                ('datetime', models.DateTimeField(blank=True, help_text='datetime the object was stored.', null=True)),
                ('pd_variable', models.ForeignKey(help_text='variable in PD part of model', on_delete=django.db.models.deletion.CASCADE, related_name='pd_mappings', to='pkpdapp.variable')),
                ('pk_variable', models.ForeignKey(help_text='variable in PK part of model', on_delete=django.db.models.deletion.CASCADE, related_name='pk_mappings', to='pkpdapp.variable')),
                ('pkpd_model', models.ForeignKey(help_text='PKPD model that this mapping is for', on_delete=django.db.models.deletion.CASCADE, related_name='mappings', to='pkpdapp.combinedmodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='pharmacodynamicmodel',
            name='project',
            field=models.ForeignKey(blank=True, help_text='Project that "owns" this model', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pd_models', to='pkpdapp.project'),
        ),
        migrations.CreateModel(
            name='LogLikelihoodParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of log_likelihood parameter.', max_length=100)),
                ('parent_index', models.IntegerField(blank=True, help_text='parameter index for distribution and equation parameters. blank for models (variable is used instead)', null=True)),
                ('child_index', models.IntegerField(default=0, help_text='output index for all log_likelihoods. ')),
                ('length', models.IntegerField(blank=True, help_text='length of array representing parameter. null for scalar', null=True)),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outputs', to='pkpdapp.loglikelihood')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='pkpdapp.loglikelihood')),
                ('variable', models.ForeignKey(blank=True, help_text='input model variable for this parameter.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='log_likelihood_parameters', to='pkpdapp.variable')),
            ],
        ),
        migrations.AddField(
            model_name='loglikelihood',
            name='children',
            field=models.ManyToManyField(related_name='parents', through='pkpdapp.LogLikelihoodParameter', to='pkpdapp.LogLikelihood'),
        ),
        migrations.AddField(
            model_name='loglikelihood',
            name='inference',
            field=models.ForeignKey(help_text='Log_likelihood belongs to this inference object. ', on_delete=django.db.models.deletion.CASCADE, related_name='log_likelihoods', to='pkpdapp.inference'),
        ),
        migrations.AddField(
            model_name='loglikelihood',
            name='protocol_filter',
            field=models.ForeignKey(blank=True, help_text='filter subject data on this protocol(null implies all subjects)', null=True, on_delete=django.db.models.deletion.PROTECT, to='pkpdapp.protocol'),
        ),
        migrations.AddField(
            model_name='loglikelihood',
            name='variable',
            field=models.ForeignKey(blank=True, help_text='If form=MODEL, a variable (any) in the deterministic model. ', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='log_likelihoods', to='pkpdapp.variable'),
        ),
        migrations.CreateModel(
            name='InferenceResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iteration', models.IntegerField(help_text='Iteration')),
                ('value', models.FloatField(help_text='estimated parameter value')),
                ('chain', models.ForeignKey(help_text='Chain related to the row', on_delete=django.db.models.deletion.CASCADE, related_name='inference_results', to='pkpdapp.inferencechain')),
                ('log_likelihood', models.ForeignKey(help_text='log_likelihood related to this result', on_delete=django.db.models.deletion.CASCADE, related_name='inference_results', to='pkpdapp.loglikelihood')),
                ('subject', models.ForeignKey(blank=True, help_text='subject related to this result', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='inference_results', to='pkpdapp.subject')),
            ],
        ),
        migrations.CreateModel(
            name='InferenceOutputResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('median', models.FloatField(help_text='median of output distribution')),
                ('percentile_min', models.FloatField(blank=True, help_text='10th percentile of output distribution', null=True)),
                ('percentile_max', models.FloatField(blank=True, help_text='90th percentile of output distribution', null=True)),
                ('data', models.FloatField(help_text='data value for comparison')),
                ('time', models.FloatField(help_text='time of output value')),
                ('chain', models.ForeignKey(help_text='Chain related to the output result', on_delete=django.db.models.deletion.CASCADE, related_name='inference_output_results', to='pkpdapp.inferencechain')),
                ('log_likelihood', models.ForeignKey(help_text='log_likelihood related to the output result', on_delete=django.db.models.deletion.CASCADE, related_name='inference_output_results', to='pkpdapp.loglikelihood')),
                ('subject', models.ForeignKey(blank=True, help_text='subject of output value', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inference_outputs', to='pkpdapp.subject')),
            ],
        ),
        migrations.CreateModel(
            name='InferenceFunctionResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iteration', models.IntegerField(help_text='Iteration')),
                ('value', models.FloatField(help_text='estimated parameter value')),
                ('chain', models.ForeignKey(help_text='Chain related to the row', on_delete=django.db.models.deletion.CASCADE, related_name='inference_function_results', to='pkpdapp.inferencechain')),
            ],
        ),
        migrations.AddField(
            model_name='inference',
            name='project',
            field=models.ForeignKey(help_text='Project that "owns" this inference object', on_delete=django.db.models.deletion.CASCADE, to='pkpdapp.project'),
        ),
        migrations.CreateModel(
            name='EfficacyExperiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', help_text='name of the experiment', max_length=100)),
                ('c50', models.FloatField(help_text='half maximal effective concentration')),
                ('hill_coefficient', models.FloatField(default=1.0, help_text='Hill coefficient measure of binding')),
                ('c50_unit', models.ForeignKey(help_text='unit for c50', on_delete=django.db.models.deletion.PROTECT, related_name='efficacy_experiments', to='pkpdapp.unit')),
                ('compound', models.ForeignKey(help_text='compound for efficacy experiment', on_delete=django.db.models.deletion.CASCADE, related_name='efficacy_experiments', to='pkpdapp.compound')),
            ],
        ),
        migrations.AddConstraint(
            model_name='dosebase',
            constraint=models.CheckConstraint(check=models.Q(('duration__gt', 0)), name='Duration must be greater than 0'),
        ),
        migrations.AddField(
            model_name='derivedvariable',
            name='pk_variable',
            field=models.ForeignKey(help_text='base variable in PK part of model', on_delete=django.db.models.deletion.CASCADE, related_name='derived_variables', to='pkpdapp.variable'),
        ),
        migrations.AddField(
            model_name='derivedvariable',
            name='pkpd_model',
            field=models.ForeignKey(help_text='PKPD model that this derived variable is for', on_delete=django.db.models.deletion.CASCADE, related_name='derived_variables', to='pkpdapp.combinedmodel'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='project',
            field=models.ForeignKey(blank=True, help_text='Project that "owns" this model', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='datasets', to='pkpdapp.project'),
        ),
        migrations.AddField(
            model_name='compound',
            name='dissociation_unit',
            field=models.ForeignKey(default=pkpdapp.models.compound.get_dissociation_constant_unit, help_text='unit for dissociation constant', on_delete=django.db.models.deletion.PROTECT, related_name='compounds_kd', to='pkpdapp.unit'),
        ),
        migrations.AddField(
            model_name='compound',
            name='intrinsic_clearance_unit',
            field=models.ForeignKey(default=pkpdapp.models.compound.get_intrinsic_clearence_unit, help_text='unit for intrinsic clearance', on_delete=django.db.models.deletion.PROTECT, related_name='compounds_clint', to='pkpdapp.unit'),
        ),
        migrations.AddField(
            model_name='compound',
            name='molecular_mass_unit',
            field=models.ForeignKey(default=pkpdapp.models.compound.get_mol_mass_unit, help_text='unit for molecular mass (e.g. g/mol)', on_delete=django.db.models.deletion.PROTECT, related_name='compound_mol_mass', to='pkpdapp.unit'),
        ),
        migrations.AddField(
            model_name='compound',
            name='target_concentration_unit',
            field=models.ForeignKey(default=pkpdapp.models.compound.get_target_concentration_unit, help_text='unit for target concentration', on_delete=django.db.models.deletion.PROTECT, related_name='compounds_target_conc', to='pkpdapp.unit'),
        ),
        migrations.AddField(
            model_name='compound',
            name='target_molecular_mass_unit',
            field=models.ForeignKey(default=pkpdapp.models.compound.get_mol_mass_unit, help_text='unit for target molecular mass (e.g. g/mol)', on_delete=django.db.models.deletion.PROTECT, related_name='compounds_target_mol_mass', to='pkpdapp.unit'),
        ),
        migrations.AddField(
            model_name='compound',
            name='use_efficacy',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compound_using', to='pkpdapp.efficacyexperiment'),
        ),
        migrations.AddField(
            model_name='combinedmodel',
            name='pd_model',
            field=models.ForeignKey(blank=True, help_text='PD part of model', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pkpd_models', to='pkpdapp.pharmacodynamicmodel'),
        ),
        migrations.AddField(
            model_name='combinedmodel',
            name='pd_model2',
            field=models.ForeignKey(blank=True, help_text='second PD part of model', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pkpd_models2', to='pkpdapp.pharmacodynamicmodel'),
        ),
        migrations.AddField(
            model_name='combinedmodel',
            name='pk_model',
            field=models.ForeignKey(blank=True, help_text='model', null=True, on_delete=django.db.models.deletion.PROTECT, to='pkpdapp.pharmacokineticmodel'),
        ),
        migrations.AddField(
            model_name='combinedmodel',
            name='project',
            field=models.ForeignKey(blank=True, help_text='Project that "owns" this model', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pk_models', to='pkpdapp.project'),
        ),
        migrations.AddField(
            model_name='categoricalbiomarker',
            name='biomarker_type',
            field=models.ForeignKey(help_text='biomarker type, for example "weight in kg"', on_delete=django.db.models.deletion.CASCADE, related_name='categorical_biomarkers', to='pkpdapp.biomarkertype'),
        ),
        migrations.AddField(
            model_name='categoricalbiomarker',
            name='subject',
            field=models.ForeignKey(help_text='subject associated with this biomarker', on_delete=django.db.models.deletion.CASCADE, related_name='categorical_biomarkers', to='pkpdapp.subject'),
        ),
        migrations.AddField(
            model_name='biomarkertype',
            name='dataset',
            field=models.ForeignKey(help_text='dataset containing this biomarker measurement', on_delete=django.db.models.deletion.CASCADE, related_name='biomarker_types', to='pkpdapp.dataset'),
        ),
        migrations.AddField(
            model_name='biomarkertype',
            name='display_time_unit',
            field=models.ForeignKey(help_text='unit to use when sending or displaying time values', on_delete=django.db.models.deletion.PROTECT, related_name='biomarker_types_time_display', to='pkpdapp.unit'),
        ),
        migrations.AddField(
            model_name='biomarkertype',
            name='display_unit',
            field=models.ForeignKey(help_text='unit to use when sending or displaying biomarker values', on_delete=django.db.models.deletion.PROTECT, related_name='biomarker_types_display', to='pkpdapp.unit'),
        ),
        migrations.AddField(
            model_name='biomarkertype',
            name='stored_time_unit',
            field=models.ForeignKey(help_text='unit for the time values stored in :model:`pkpdapp.Biomarker`', on_delete=django.db.models.deletion.PROTECT, related_name='biomarker_types_time_stored', to='pkpdapp.unit'),
        ),
        migrations.AddField(
            model_name='biomarkertype',
            name='stored_unit',
            field=models.ForeignKey(help_text='unit for the value stored in :model:`pkpdapp.Biomarker`', on_delete=django.db.models.deletion.PROTECT, related_name='biomarker_types_stored', to='pkpdapp.unit'),
        ),
        migrations.AddField(
            model_name='biomarker',
            name='biomarker_type',
            field=models.ForeignKey(help_text='biomarker type, for example "concentration in mg"', on_delete=django.db.models.deletion.CASCADE, related_name='biomarkers', to='pkpdapp.biomarkertype'),
        ),
        migrations.AddField(
            model_name='biomarker',
            name='subject',
            field=models.ForeignKey(help_text='subject associated with this biomarker', on_delete=django.db.models.deletion.CASCADE, related_name='biomarkers', to='pkpdapp.subject'),
        ),
        migrations.AddConstraint(
            model_name='variable',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('is_log', True), ('lower_bound__gt', 0)), ('is_log', False), _connector='OR'), name='variable: log scale must have a lower bound greater than zero'),
        ),
        migrations.AddConstraint(
            model_name='variable',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('pk_model__isnull', True), ('dosed_pk_model__isnull', True), ('pd_model__isnull', False)), models.Q(('pk_model__isnull', False), ('dosed_pk_model__isnull', True), ('pd_model__isnull', True)), models.Q(('pk_model__isnull', True), ('dosed_pk_model__isnull', False), ('pd_model__isnull', True)), _connector='OR'), name='variable: variable must belong to a model'),
        ),
        migrations.AddConstraint(
            model_name='subject',
            constraint=models.UniqueConstraint(fields=('id_in_dataset', 'dataset'), name='subject_dataset_unique'),
        ),
        migrations.AlterUniqueTogether(
            name='projectaccess',
            unique_together={('user', 'project')},
        ),
        migrations.AddConstraint(
            model_name='loglikelihood',
            constraint=models.CheckConstraint(check=models.Q(('form', 'F'), ('value__isnull', True), ('biomarker_type__isnull', True), _negated=True), name='loglikelihood: fixed log_likelihood must have a value or biomarker_type'),
        ),
        migrations.AddConstraint(
            model_name='loglikelihood',
            constraint=models.CheckConstraint(check=models.Q(('form', 'M'), ('variable__isnull', True), _negated=True), name='loglikelihood: model log_likelihood must have a variable'),
        ),
        migrations.AddConstraint(
            model_name='loglikelihood',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('form', 'F'), ('form', 'S'), ('form', 'M'), _connector='OR'), ('biomarker_type__isnull', False), ('protocol_filter', False), _negated=True), name='loglikelihood: deterministic log_likelihoods cannot have data'),
        ),
        migrations.AddField(
            model_name='dose',
            name='protocol',
            field=models.ForeignKey(help_text='protocol containing this dose', on_delete=django.db.models.deletion.CASCADE, related_name='doses', to='pkpdapp.protocol'),
        ),
    ]
